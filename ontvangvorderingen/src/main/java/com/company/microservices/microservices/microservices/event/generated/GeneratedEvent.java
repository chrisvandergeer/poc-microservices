package com.company.microservices.microservices.microservices.event.generated;

import com.company.microservices.microservices.microservices.event.Event;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.sql.Timestamp;
import java.util.Optional;

/**
 * The generated base for the {@link
 * com.company.microservices.microservices.microservices.event.Event}-interface
 * representing entities of the {@code event}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedEvent {
    
    /**
     * This Field corresponds to the {@link Event} field that can be obtained
     * using the {@link Event#getId()} method.
     */
    LongField<Event, Long> ID = LongField.create(
        Identifier.ID,
        Event::getId,
        Event::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Event} field that can be obtained
     * using the {@link Event#getEventId()} method.
     */
    StringField<Event, String> EVENT_ID = StringField.create(
        Identifier.EVENT_ID,
        Event::getEventId,
        Event::setEventId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Event} field that can be obtained
     * using the {@link Event#getSource()} method.
     */
    StringField<Event, String> SOURCE = StringField.create(
        Identifier.SOURCE,
        o -> OptionalUtil.unwrap(o.getSource()),
        Event::setSource,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Event} field that can be obtained
     * using the {@link Event#getCreatiemoment()} method.
     */
    ComparableField<Event, Timestamp, Timestamp> CREATIEMOMENT = ComparableField.create(
        Identifier.CREATIEMOMENT,
        Event::getCreatiemoment,
        Event::setCreatiemoment,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Event. The id field corresponds to the database
     * column microservices.microservices.event.id.
     * 
     * @return the id of this Event
     */
    long getId();
    
    /**
     * Returns the eventId of this Event. The eventId field corresponds to the
     * database column microservices.microservices.event.event_id.
     * 
     * @return the eventId of this Event
     */
    String getEventId();
    
    /**
     * Returns the source of this Event. The source field corresponds to the
     * database column microservices.microservices.event.source.
     * 
     * @return the source of this Event
     */
    Optional<String> getSource();
    
    /**
     * Returns the creatiemoment of this Event. The creatiemoment field
     * corresponds to the database column
     * microservices.microservices.event.creatiemoment.
     * 
     * @return the creatiemoment of this Event
     */
    Timestamp getCreatiemoment();
    
    /**
     * Sets the id of this Event. The id field corresponds to the database
     * column microservices.microservices.event.id.
     * 
     * @param id to set of this Event
     * @return   this Event instance
     */
    Event setId(long id);
    
    /**
     * Sets the eventId of this Event. The eventId field corresponds to the
     * database column microservices.microservices.event.event_id.
     * 
     * @param eventId to set of this Event
     * @return        this Event instance
     */
    Event setEventId(String eventId);
    
    /**
     * Sets the source of this Event. The source field corresponds to the
     * database column microservices.microservices.event.source.
     * 
     * @param source to set of this Event
     * @return       this Event instance
     */
    Event setSource(String source);
    
    /**
     * Sets the creatiemoment of this Event. The creatiemoment field corresponds
     * to the database column microservices.microservices.event.creatiemoment.
     * 
     * @param creatiemoment to set of this Event
     * @return              this Event instance
     */
    Event setCreatiemoment(Timestamp creatiemoment);
    
    enum Identifier implements ColumnIdentifier<Event> {
        
        ID            ("id"),
        EVENT_ID      ("event_id"),
        SOURCE        ("source"),
        CREATIEMOMENT ("creatiemoment");
        
        private final String columnName;
        private final TableIdentifier<Event> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "microservices";
        }
        
        @Override
        public String getSchemaName() {
            return "microservices";
        }
        
        @Override
        public String getTableName() {
            return "event";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Event> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}