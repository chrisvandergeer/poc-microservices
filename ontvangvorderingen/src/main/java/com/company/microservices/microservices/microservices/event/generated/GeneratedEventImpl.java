package com.company.microservices.microservices.microservices.event.generated;

import com.company.microservices.microservices.microservices.event.Event;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.microservices.microservices.microservices.event.Event}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedEventImpl implements Event {
    
    private long id;
    private String eventId;
    private String source;
    private Timestamp creatiemoment;
    
    protected GeneratedEventImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public String getEventId() {
        return eventId;
    }
    
    @Override
    public Optional<String> getSource() {
        return Optional.ofNullable(source);
    }
    
    @Override
    public Timestamp getCreatiemoment() {
        return creatiemoment;
    }
    
    @Override
    public Event setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Event setEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }
    
    @Override
    public Event setSource(String source) {
        this.source = source;
        return this;
    }
    
    @Override
    public Event setCreatiemoment(Timestamp creatiemoment) {
        this.creatiemoment = creatiemoment;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "            + Objects.toString(getId()));
        sj.add("eventId = "       + Objects.toString(getEventId()));
        sj.add("source = "        + Objects.toString(OptionalUtil.unwrap(getSource())));
        sj.add("creatiemoment = " + Objects.toString(getCreatiemoment()));
        return "EventImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Event)) { return false; }
        final Event thatEvent = (Event)that;
        if (this.getId() != thatEvent.getId()) {return false; }
        if (!Objects.equals(this.getEventId(), thatEvent.getEventId())) {return false; }
        if (!Objects.equals(this.getSource(), thatEvent.getSource())) {return false; }
        if (!Objects.equals(this.getCreatiemoment(), thatEvent.getCreatiemoment())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getEventId());
        hash = 31 * hash + Objects.hashCode(getSource());
        hash = 31 * hash + Objects.hashCode(getCreatiemoment());
        return hash;
    }
}